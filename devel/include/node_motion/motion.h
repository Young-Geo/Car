// Generated by gencpp from file node_motion/motion.msg
// DO NOT EDIT!


#ifndef NODE_MOTION_MESSAGE_MOTION_H
#define NODE_MOTION_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace node_motion
{
template <class ContainerAllocator>
struct motion_
{
  typedef motion_<ContainerAllocator> Type;

  motion_()
    : isadj_frame(0)
    , type(0)
    , lf_forward(0)
    , ri_forward(0)
    , lf_back(0)
    , ri_back(0)
    , time_stamp(0)  {
    }
  motion_(const ContainerAllocator& _alloc)
    : isadj_frame(0)
    , type(0)
    , lf_forward(0)
    , ri_forward(0)
    , lf_back(0)
    , ri_back(0)
    , time_stamp(0)  {
  (void)_alloc;
    }



   typedef uint8_t _isadj_frame_type;
  _isadj_frame_type isadj_frame;

   typedef uint16_t _type_type;
  _type_type type;

   typedef int32_t _lf_forward_type;
  _lf_forward_type lf_forward;

   typedef int32_t _ri_forward_type;
  _ri_forward_type ri_forward;

   typedef int32_t _lf_back_type;
  _lf_back_type lf_back;

   typedef int32_t _ri_back_type;
  _ri_back_type ri_back;

   typedef uint64_t _time_stamp_type;
  _time_stamp_type time_stamp;




  typedef boost::shared_ptr< ::node_motion::motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_motion::motion_<ContainerAllocator> const> ConstPtr;

}; // struct motion_

typedef ::node_motion::motion_<std::allocator<void> > motion;

typedef boost::shared_ptr< ::node_motion::motion > motionPtr;
typedef boost::shared_ptr< ::node_motion::motion const> motionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_motion::motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_motion::motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace node_motion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'node_motion': ['/home/pi/Car/src/node_motion/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::node_motion::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_motion::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_motion::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_motion::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_motion::motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_motion::motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_motion::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db7c515f060d48a572a63b0cceba60c8";
  }

  static const char* value(const ::node_motion::motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb7c515f060d48a5ULL;
  static const uint64_t static_value2 = 0x72a63b0cceba60c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_motion::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_motion/motion";
  }

  static const char* value(const ::node_motion::motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_motion::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 isadj_frame\n\
uint16 type\n\
int32 lf_forward\n\
int32 ri_forward\n\
int32 lf_back\n\
int32 ri_back\n\
uint64 time_stamp\n\
";
  }

  static const char* value(const ::node_motion::motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_motion::motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isadj_frame);
      stream.next(m.type);
      stream.next(m.lf_forward);
      stream.next(m.ri_forward);
      stream.next(m.lf_back);
      stream.next(m.ri_back);
      stream.next(m.time_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_motion::motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_motion::motion_<ContainerAllocator>& v)
  {
    s << indent << "isadj_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isadj_frame);
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "lf_forward: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf_forward);
    s << indent << "ri_forward: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ri_forward);
    s << indent << "lf_back: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf_back);
    s << indent << "ri_back: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ri_back);
    s << indent << "time_stamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_MOTION_MESSAGE_MOTION_H
