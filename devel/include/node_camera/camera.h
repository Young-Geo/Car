// Generated by gencpp from file node_camera/camera.msg
// DO NOT EDIT!


#ifndef NODE_CAMERA_MESSAGE_CAMERA_H
#define NODE_CAMERA_MESSAGE_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace node_camera
{
template <class ContainerAllocator>
struct camera_
{
  typedef camera_<ContainerAllocator> Type;

  camera_()
    : size(0)
    , width(0)
    , height(0)
    , data()  {
    }
  camera_(const ContainerAllocator& _alloc)
    : size(0)
    , width(0)
    , height(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _size_type;
  _size_type size;

   typedef uint16_t _width_type;
  _width_type width;

   typedef uint16_t _height_type;
  _height_type height;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::node_camera::camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_camera::camera_<ContainerAllocator> const> ConstPtr;

}; // struct camera_

typedef ::node_camera::camera_<std::allocator<void> > camera;

typedef boost::shared_ptr< ::node_camera::camera > cameraPtr;
typedef boost::shared_ptr< ::node_camera::camera const> cameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_camera::camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_camera::camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace node_camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'node_camera': ['/home/pi/Car/src/node_camera/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::node_camera::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_camera::camera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_camera::camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_camera::camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_camera::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_camera::camera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_camera::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d12f0c63fe812218e21136bd553997df";
  }

  static const char* value(const ::node_camera::camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd12f0c63fe812218ULL;
  static const uint64_t static_value2 = 0xe21136bd553997dfULL;
};

template<class ContainerAllocator>
struct DataType< ::node_camera::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_camera/camera";
  }

  static const char* value(const ::node_camera::camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_camera::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 size\n\
uint16 width\n\
uint16 height\n\
string data\n\
";
  }

  static const char* value(const ::node_camera::camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_camera::camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_camera::camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_camera::camera_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_CAMERA_MESSAGE_CAMERA_H
